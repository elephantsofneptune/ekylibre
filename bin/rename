#!/usr/bin/env ruby
require 'rubygems'
require 'active_support'
require 'active_support/core_ext'
require 'optparse'
require 'pathname'
require 'fileutils'
require 'yaml'
require 'colored'

STDOUT.sync = true

class Renamer
  attr_reader :root

  SUPPORTED_TYPES = %i[model table].freeze

  def execute(command)
    puts command.send(@simulate ? :yellow : :red).to_s
    system(command) unless @simulate
  end

  def update_file(file, content)
    action = File.exist?(file) ? 'update' : 'write'
    puts "#{action.send(@simulate ? :yellow : :red)} #{file}"
    unless @simulate
      File.open(file, 'wb') do |f|
        f.write content
      end
    end
  end

  def initialize(args)
    unless $PROGRAM_NAME =~ /^(.\/)?bin\//
      puts 'Script must be started from Rails root.'
      exit 0
    end
    @root = Pathname.new('.')

    @options = { migrate: true }
    @simulate = false
    OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options] <type> <old_name> <new_name>" \
                    "Available types are: #{SUPPORTED_TYPES.join(', ')}"

      opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
      end
      opts.on_tail('-s', '--simulate', 'Simulate changes') do
        @options[:simulate] = true
        @simulate = true
      end
      opts.on_tail('-m', '--[no-]migration', 'Generate migration file') do |migrate|
        @options[:migrate] = migrate
      end
    end.parse!(args)

    if args.any?
      @type = args.shift.to_sym
      unless SUPPORTED_TYPES.include?(@type)
        puts "Not supported type: #{@type.inspect}."
        exit 5
      end
    else
      puts 'No type given.'
      exit 6
    end

    unless args.size >= 2
      puts 'Not enough parameters.'
      exit 7
    end

    @old = {}
    @new = {}

    if @type == :model
      # class
      @old[:model] = args.shift
      @new[:model] = args.shift
      # table
      @old[:table] = @old[:model].tableize
      @new[:table] = @new[:model].tableize
    elsif @type == :table
      # table
      @old[:table] = args.shift
      @new[:table] = args.shift
      # model
      @old[:model] = @old[:table].classify
      @new[:model] = @new[:table].classify
    end
    # controller
    @old[:controller] = @old[:table].camelcase
    @new[:controller] = @new[:table].camelcase
    # record
    @old[:record] = @old[:model].underscore
    @new[:record] = @new[:model].underscore
  end

  # Defined helper method
  %i[table model record controller].each do |info|
    define_method "old_#{info}" do
      @old[info]
    end
    define_method "new_#{info}" do
      @new[info]
    end
  end

  # Run the change to rename the type of object
  def run
    # db/migrate
    if @options[:migrate]
      name = "rename_#{old_table}_to_#{new_table}"

      migrations = []
      Dir.chdir(root.join('db', 'migrate')) do
        migrations += Dir.glob('*').collect { |f| f.split(/[\_\.]/)[1..-2].join('_') }
      end

      if migrations.include? name
        puts "ERROR: A migration called #{name} already exists!".red
        exit 1
      end

      tables = YAML.load_file(root.join('db', 'tables.yml')).deep_symbolize_keys
      file = root.join('db', 'migrate', Time.now.strftime('%Y%m%d%H%M%S') + "_#{name}.rb")

      code = "class #{name.camelcase} < ActiveRecord::Migration\n\n"
      code << "  def change\n"
      if @type == :table
        code << "    rename_table :#{old_table}, :#{new_table}\n"
      end

      # Polymorphic columns
      up_code = ''
      down_code = ''
      tables.each do |table, columns|
        columns.each do |column, attributes|
          if column == :type
            col = column
            up_code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{new_model}' WHERE \#{quote_column_name(:#{col})}='#{old_model}'\"\n"
            down_code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{old_model}' WHERE \#{quote_column_name(:#{col})}='#{new_model}'\"\n"
          end
          next unless attributes[:references] =~ /^\~/
          col = attributes[:references].gsub(/^\~/, '')
          up_code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{new_model}' WHERE \#{quote_column_name(:#{col})}='#{old_model}'\"\n"
          down_code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{old_model}' WHERE \#{quote_column_name(:#{col})}='#{new_model}'\"\n"
        end
      end
      code << "    # Polymorphic columns\n"
      code << "    reversible do |dir|\n"
      code << "      dir.up do\n"
      code << up_code
      code << "      end\n"
      code << "      dir.down do\n"
      code << down_code
      code << "      end\n"
      code << "    end\n"

      # Special columns
      table = :custom_fields
      col = :customized_type
      code << "    # #{table.to_s.humanize}\n"
      code << "    reversible do |dir|\n"
      code << "      dir.up do\n"
      code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{new_model}' WHERE \#{quote_column_name(:#{col})}='#{old_model}'\"\n"
      code << "      end\n"
      code << "      dir.down do\n"
      code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{old_model}' WHERE \#{quote_column_name(:#{col})}='#{new_model}'\"\n"
      code << "      end\n"
      code << "    end\n"

      table = :listings
      col = :root_model
      code << "    # #{table.to_s.humanize}\n"
      code << "    reversible do |dir|\n"
      code << "      dir.up do\n"
      code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{new_record}' WHERE \#{quote_column_name(:#{col})}='#{old_record}'\"\n"
      code << "      end\n"
      code << "      dir.down do\n"
      code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{old_record}' WHERE \#{quote_column_name(:#{col})}='#{new_record}'\"\n"
      code << "      end\n"
      code << "    end\n"

      table = :sequences
      col = :usage
      code << "    # #{table.to_s.humanize}\n"
      code << "    reversible do |dir|\n"
      code << "      dir.up do\n"
      code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{new_table}' WHERE \#{quote_column_name(:#{col})}='#{old_table}'\"\n"
      code << "      end\n"
      code << "      dir.down do\n"
      code << "        execute \"UPDATE \#{quote_table_name(:#{table})} SET \#{quote_column_name(:#{col})}='#{old_table}' WHERE \#{quote_column_name(:#{col})}='#{new_table}'\"\n"
      code << "      end\n"
      code << "    end\n"

      code << "\n"
      code << "    # Add your specific code here...\n"
      code << "\n"

      code << "  end\n\n"
      code << "end\n"

      FileUtils.mkdir_p(file.dirname)
      update_file(file, code)
    end

    app = root.join('app')

    # app/models
    of = app.join('models', "#{old_record}.rb")
    nf = app.join('models', "#{new_record}.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class #{old_model} /class #{new_model} /' #{nf}")
    end

    # app/controllers
    of = app.join('controllers', "#{old_table}_controller.rb")
    nf = app.join('controllers', "#{new_table}_controller.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class #{old_controller}Controller /class #{new_controller}Controller /' #{nf}")
    end

    # app/controllers/backend
    of = app.join('controllers', 'backend', "#{old_table}_controller.rb")
    nf = app.join('controllers', 'backend', "#{new_table}_controller.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class Backend::#{old_controller}Controller /class Backend::#{new_controller}Controller /' #{nf}")
    end

    # app/views
    of = app.join('views', old_table)
    nf = app.join('views', new_table)
    execute("git mv #{of} #{nf}") if File.exist?(of)

    # app/views/backend
    of = app.join('views', 'backend', old_table)
    nf = app.join('views', 'backend', new_table)
    execute("git mv #{of} #{nf}") if File.exist?(of)

    # app/helpers
    of = app.join('helpers', "#{old_table}_helper.rb")
    nf = app.join('helpers', "#{new_table}_helper.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/module #{old_controller}Helper/module #{new_controller}Helper/' #{nf}")
    end

    # app/helpers/backend
    of = app.join('helpers', 'backend', "#{old_table}_helper.rb")
    nf = app.join('helpers', 'backend', "#{new_table}_helper.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/module Backend::#{old_controller}Helper/module Backend::#{new_controller}Helper/' #{nf}")
    end

    config = root.join('config')

    # config/locales/*/models.yml
    for file in Dir[config.join('locales', '*', '{models,enumerize}.yml')].sort
      lf = Pathname(file)
      tr = YAML.load_file(lf)
      locale = tr.keys.first
      if tr[locale]['activerecord']
        if tr[locale]['activerecord']['attributes']
          if tr[locale]['activerecord']['attributes'][old_record]
            tr[locale]['activerecord']['attributes'][new_record] = tr[locale]['activerecord']['attributes'].delete(old_record)
          end
        end
        if tr[locale]['activerecord']['errors']
          if tr[locale]['activerecord']['errors']['models']
            if tr[locale]['activerecord']['errors']['models'][old_record]
              tr[locale]['activerecord']['errors']['models'][new_record] = tr[locale]['activerecord']['errors']['models'].delete(old_record)
            end
          end
        end
        if tr[locale]['activerecord']['models']
          if tr[locale]['activerecord']['models'][old_record]
            tr[locale]['activerecord']['models'][new_record] = tr[locale]['activerecord']['models'].delete(old_record)
          end
        end
      end
      if tr[locale]['enumerize']
        if tr[locale]['enumerize'][old_record]
          tr[locale]['enumerize'][new_record] = tr[locale]['enumerize'].delete(old_record)
        end
      end
      if tr[locale]['models']
        if tr[locale]['models'][old_record]
          tr[locale]['models'][new_record] = tr[locale]['models'].delete(old_record)
        end
      end

      code = tr.to_yaml

      update_file(lf, code)
    end

    # config/locales/*/action.yml
    for file in Dir[config.join('locales', '*', 'action.yml')].sort
      lf = Pathname(file)
      tr = YAML.load_file(lf)
      locale = tr.keys.first
      if tr[locale]['actions']
        if tr[locale]['actions']["backend/#{old_table}"]
          tr[locale]['actions']["backend/#{new_table}"] = tr[locale]['actions'].delete("backend/#{old_table}")
        end
      end
      if tr[locale]['controllers']
        if tr[locale]['controllers']["backend/#{old_table}"]
          tr[locale]['controllers']["backend/#{new_table}"] = tr[locale]['controllers'].delete("backend/#{old_table}")
        end
      end
      if tr[locale]['unrolls']
        if tr[locale]['unrolls']["backend/#{old_table}"]
          tr[locale]['unrolls']["backend/#{new_table}"] = tr[locale]['unrolls'].delete("backend/#{old_table}")
        end
      end

      code = tr.to_yaml

      update_file(lf, code)
    end

    # config/locales/*/help/
    for file in Dir[config.join('locales', '*', 'help', "#{old_table}-*.txt")].sort
      of = Pathname.new(file)
      nf = of.join('..', "#{new_table}-" + of.basename.to_s.split(/[\-\.]+/)[1..-2].join('-') + '.txt')
      execute("git mv #{of} #{nf}")
    end

    # TODO: Updates links in help files

    # config/navigation
    nf = config.join('navigation.xml')
    if nf.exist?
      source = nil
      File.open(nf, 'rb') do |f|
        source = f.read
      end

      update_file(nf, source.gsub(/(\"backend\/)#{old_table}(\#)/, '\1' + new_table + '\2'))
    else
      puts "Cannot update #{nf}".yellow
    end

    # config/rights
    nf = config.join('rights.yml')
    if nf.exist?
      source = nil
      File.open(nf, 'rb') do |f|
        source = f.read
      end
      update_file(nf, source.gsub(/(\"backend\/)#{old_table}(\#)/, '\1' + new_table + '\2'))
    else
      puts "Cannot update #{nf}".yellow
    end

    # config/routes.rb
    nf = config.join('routes.rb')
    source = nil
    File.open(nf, 'rb') do |f|
      source = f.read
    end
    update_file(nf, source.gsub(/(resources\ )+:#{old_table}(\,|\s|$)/, '\1:' + new_table + '\2'))

    test = root.join('test')

    # test/fixtures
    # Nothing to do. Related to migrations.
    if @options[:migrate]
      puts 'Run `rake db:fixtures:restore db:fixtures:dump` after migrate'.green
    end

    # test/models
    of = test.join('models', "#{old_record}_test.rb")
    nf = test.join('models', "#{new_record}_test.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class #{old_model}Test /class #{new_model}Test /' #{nf}")
    end

    # test/models/backend
    of = test.join('models', 'backend', "#{old_record}_test.rb")
    nf = test.join('models', 'backend', "#{new_record}_test.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class Backend::#{old_model}Test /class Backend::#{new_model}Test /' #{nf}")
    end

    # test/helpers
    of = test.join('helpers', "#{old_table}_helper_test.rb")
    nf = test.join('helpers', "#{new_table}_helper_test.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class #{old_controller}HelperTest /class #{new_controller}HelperTest /' #{nf}")
    end

    # test/helpers/backend
    of = test.join('helpers', 'backend', "#{old_table}_helper_test.rb")
    nf = test.join('helpers', 'backend', "#{new_table}_helper_test.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class Backend::#{old_controller}HelperTest /class Backend::#{new_controller}HelperTest /' #{nf}")
    end

    # test/controllers
    of = test.join('controllers', "#{old_table}_controller_test.rb")
    nf = test.join('controllers', "#{new_table}_controller_test.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class #{old_controller}ControllerTest /class #{new_controller}ControllerTest /' #{nf}")
    end

    # test/controllers/backend
    of = test.join('controllers', 'backend', "#{old_table}_controller_test.rb")
    nf = test.join('controllers', 'backend', "#{new_table}_controller_test.rb")
    execute("git mv #{of} #{nf}") if File.exist?(of)
    if File.exist?(nf)
      execute("sed -i 's/class Backend::#{old_controller}ControllerTest /class Backend::#{new_controller}ControllerTest /' #{nf}")
    end

    lib = root.join('lib')

    # General replacing
    for file in Dir[app.join('**', '*.rb')] + Dir[lib.join('**', '*.rb')] + Dir[app.join('**', '*.yml')]
      source = nil
      File.open(file, 'rb') do |f|
        source = f.read
      end
      ns = source.dup
      ns.gsub!(/\b#{old_model}\b/, new_model)
      ns.gsub!(/^(\ +)has\_many\ \:#{old_table}(\s?)$/, '\1has_many :' + old_table + ', class_name: "' + new_model + '"')
      ns.gsub!(/^(\ +)belongs\_to\ \:#{old_record}(\s?)$/, '\1belongs_to :' + old_record + ', class_name: "' + new_model + '"')
      ns.gsub!(/:model\ *\=\>\ *:#{old_table}([^a-z\_]|$)/, 'model: :' + new_table + '\1')
      ns.gsub!(/:model\ *\=\>\ *:#{old_record}([^a-z\_]|$)/, 'model: :' + new_record + '\1')
      ns.gsub!(/model\:\ *:#{old_table}([^a-z\_]|$)/, 'model: :' + new_table + '\1')
      ns.gsub!(/model\:\ *:#{old_record}([^a-z\_]|$)/, 'model: :' + new_record + '\1')
      ns.gsub!(/(search\_conditions[\ \(]+):#{old_table}(\ *\=\>)/, '\1:' + new_table + '\2')
      ns.gsub!(/(search\_conditions[\ \(]+):#{old_record}(\ *\=\>)/, '\1:' + new_record + '\2')
      ns.gsub!(/(find\_and\_check[\(\ ]+):#{old_table}\s*(\)|\,|$)/, '\1:' + new_table + '\2')
      ns.gsub!(/(find\_and\_check[\(\ ]+):#{old_record}\s*(\)|\,|$)/, '\1:' + new_record + '\2')
      ns.gsub!(/(list[\(\ ]+):#{old_table}\s*(\)|\,|$)/, '\1:' + new_table + '\2')
      ns.gsub!(/(list[\(\ ]+):#{old_record}\s*(\)|\,|$)/, '\1:' + new_record + '\2')

      ns.gsub!(/^(\ +)(search\_for)/, '\1# \2')

      update_file(file, ns) if ns != source
    end

    puts 'Clean with `rake clean` at the end'.green unless @simulate
  end
end

# Launch renaming
Renamer.new(ARGV).run
